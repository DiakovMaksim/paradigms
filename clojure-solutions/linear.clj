(defn vectorOperation [f] (fn [a b] (mapv f a b)))
(def v+ (vectorOperation +))
(def v- (vectorOperation -))
(def v* (vectorOperation *))
(def vd (vectorOperation /))
(defn scalar [a b] (reduce + (map * a b)))
(defn vect [a b] (conj (conj (conj [] (- (* (get a 1) (get b 2)) (* (get a 2) (get b 1))))
                             (- (* (get a 2) (get b 0)) (* (get a 0) (get b 2))))
                       (- (* (get a 0) (get b 1)) (* (get a 1) (get b 0)))))
(defn v*s [a s] (v* a (vec (repeat (count a) s))))
(def m+ (vectorOperation v+))
(def m- (vectorOperation v-))
(def m* (vectorOperation v*))
(def md (vectorOperation vd))
(defn m*s [a s] (m* a (vec (repeat (count a) (vec (repeat (count (get a 0)) s))))))
(defn m*v [a v] (mapv (partial scalar v) a))
(defn transpose [a] (apply mapv vector a))
(defn m*m [a b] (mapv (partial m*v (transpose b)) a))
(defn shapeless [f] (fn [a b] (if (vector? a)
                                (if (vector? b)
                                  (mapv (shapeless f) a b)
                                  (mapv (partial (shapeless f) b) a)
                                  )
                                (if (vector? b)
                                  (mapv (partial (shapeless f) a) b)
                                  (f a b))
                                )))
(def s+ (shapeless +))
(def s- (shapeless -))
(def s* (shapeless *))
(def sd (shapeless /))
