(defn v+ [a b] (mapv + a b))
(defn v- [a b] (mapv - a b))
(defn v* [a b] (mapv * a b))
(defn vd [a b] (mapv / a b))
(defn scalar [a b] (reduce + (map * a b)))
(defn vect [a b] (conj (conj (conj [] (- (* (get a 1) (get b 2)) (* (get a 2) (get b 1))))
                             (- (* (get a 2) (get b 0)) (* (get a 0) (get b 2))))
                       (- (* (get a 0) (get b 1)) (* (get a 1) (get b 0)))))
(defn v*s [a s] (v* a (vec (repeat (count a) s))))
(defn m+ [a b] (mapv v+ a b))
(defn m- [a b] (mapv v- a b))
(defn m* [a b] (mapv v* a b))
(defn md [a b] (mapv vd a b))
(defn m*s [a s] (m* a (vec (repeat (count a) (vec (repeat (count (get a 0)) s))))))
(defn m*v [a v] (mapv (partial scalar v) a))
(defn transpose [a] (apply mapv vector a))
(defn m*m [a b] (mapv (fn [x] (m*v (transpose b) x)) a))
